{"version":3,"sources":["AppHeader.js","CardComponent.js","ProductComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["AppHeader","onNavClick","className","id","src","onClick","bind","href","CardComponent","handleClick","this","React","ProductComponent","App","cardVisable","setState","state","productVisable","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+MAEaA,EAAY,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAIvB,OACI,wBAAQC,UAAU,gBAAlB,SACI,gCAII,qBAAKC,GAAG,OAAOC,IAAI,iDAGnB,mBAAGC,QAASJ,EAAWK,MAAK,GAAOC,KAAK,IAAxC,kBACA,mBAAGF,QAASJ,EAAWK,MAAK,GAAQC,KAAK,IAAzC,qBAGA,mBAAGJ,GAAG,QAAQI,KAAK,aAAnB,yBChBHC,EAAb,kDAEI,aAAe,IAAD,8BACV,gBAoBJC,YAAc,aArBA,EAFlB,0CAMI,WACI,OAII,0BAASP,UAAU,OAAOG,QAASK,KAAKD,YAAxC,UACI,wBAAOP,UAAU,MAAjB,mBAA+B,wCADnC,SAGI,wBAAOA,UAAU,SAAjB,mBAAkC,+CAdlD,GAAmCS,aCDtBC,EAAmB,WAC5B,OAEQ,0BAASV,UAAU,UAAnB,UACI,qBAAKA,UAAU,QAAf,SAEI,qBAAKE,IAAI,kFAGb,sBAAKF,UAAU,cAAf,UACI,kDACA,sDACA,yIAEA,mBAAGA,UAAU,OAAb,2BCXPW,EAAb,kDACE,aAAe,IAAD,8BACV,gBASFZ,WAAa,SAACa,GAEb,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACpBF,aAAcE,EAAMF,iBAVzB,EAAKE,MAAQ,CACbF,aAAa,EACTG,gBAAgB,GALR,EADhB,0CAoBE,WAEE,OACI,gCACE,cAAC,EAAD,CAAWhB,WAAYS,KAAKT,aAC5B,uBAAMC,UAAU,yBAAhB,UACKQ,KAAKM,MAAMF,aACb,cAAC,EAAD,KAEGJ,KAAKM,MAAMF,aACb,cAAC,EAAD,cA9Bd,GAAyBH,aCKnBO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhB,QACfU,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,aAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,aAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCxBiC,K","file":"static/js/main.37a61d7e.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport const AppHeader = ({onNavClick}) => {\n\n\n\n    return (\n        <header className=\"ui fixed menu\">\n            <nav>\n\n\n\n                <img id=\"logo\" src=\"https://theme.zocom.io/assets/logo-black.svg\"/>\n\n\n                <a onClick={onNavClick.bind(true)} href=\"#\">Card</a>\n                <a onClick={onNavClick.bind(false)} href=\"#\">Product</a>\n\n\n                <a id=\"login\" href=\"login.html\">login</a>\n\n            </nav>\n        </header>\n    );\n\n};\n","import * as React from \"react\";\n\n\nexport class CardComponent extends React.Component {\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n\n\n\n            <article className=\"card\" onClick={this.handleClick}>\n                <aside className=\"top\">&hearts;<span>9</span></aside>\n                &hearts;\n                <aside className=\"bottom\">&hearts;<span>9</span></aside>\n\n            </article>\n\n\n\n        );\n    }\n\n    handleClick = () => {\n\n    }\n}\n","import * as React from \"react\";\n\nexport const ProductComponent = () => {\n    return (\n\n            <article className=\"product\">\n                <div className=\"image\">\n\n                    <img src=\"https://freepngimg.com/thumb/shoes/26263-3-nike-shoes-transparent-image.png\"/>\n                </div>\n\n                <div className=\"description\">\n                    <h2>Adidas Superstar</h2>\n                    <h4>2019 Djungle Edition</h4>\n                    <p>It doesnt get any hotter than this, Rule the streets with this new jungle flawored sneakers from\n                        Adidas.</p>\n                    <p className=\"pris\">799sek</p>\n\n                </div>\n\n\n            </article>\n\n);\n};\n","import * as React from \"react\";\nimport { AppHeader } from \"./AppHeader\";\nimport {CardComponent} from \"./CardComponent\";\nimport {ProductComponent} from \"./ProductComponent\";\n\nexport class App extends React.Component {\n  constructor() {\n      super();\n\n    this.state = {\n    cardVisable: false,\n        productVisable: false\n\n    };\n  }\n\n    onNavClick = (cardVisable) => {\n\n     this.setState(state => ({\n         cardVisable: !state.cardVisable\n     }))\n\n    }\n\n\n  render() {\n\n    return (\n        <div>\n          <AppHeader onNavClick={this.onNavClick} />\n          <main className=\"ui main text container\">\n              {this.state.cardVisable &&\n             <CardComponent />\n              }\n              {!this.state.cardVisable &&\n              <ProductComponent />}\n          </main>\n        </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}